[{"/home/moringa/Development/code/phase2/Bot-Battlr/src/index.js":"1","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/App.js":"2","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotsPage.js":"3","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotCollection.js":"4","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/YourBotArmy.js":"5","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotCard.js":"6","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotSpecs.js":"7","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/SortBar.js":"8"},{"size":179,"mtime":1664883588000,"results":"9","hashOfConfig":"10"},{"size":175,"mtime":1664883588000,"results":"11","hashOfConfig":"10"},{"size":5070,"mtime":1674542391133,"results":"12","hashOfConfig":"10"},{"size":234,"mtime":1674542340023,"results":"13","hashOfConfig":"10"},{"size":323,"mtime":1674542498573,"results":"14","hashOfConfig":"10"},{"size":1624,"mtime":1674542306051,"results":"15","hashOfConfig":"10"},{"size":2355,"mtime":1674542433096,"results":"16","hashOfConfig":"10"},{"size":3941,"mtime":1674542624994,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1qq8nrv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/moringa/Development/code/phase2/Bot-Battlr/src/index.js",[],["37","38"],"/home/moringa/Development/code/phase2/Bot-Battlr/src/components/App.js",[],"/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotsPage.js",["39","40"],"import React, {useEffect, useRef, useState} from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\"\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\n\nfunction BotsPage() {\n  //start here with your code for step one\n  const [allBots, setAllBots] = useState([])\n  const [filteredBots, setFilteredBots] = useState([])\n  const [enlistedBots, setEnlistedBots] = useState([])\n  const [botSpecs, setBotSpecs] = useState(null)\n  const [showSortBar, setShowSortBar] = useState(true)\n  const sortStrategy = useRef({ health: 1, damage: 1, armor: 1 })\n  const currentlyFilteringBy = useRef({support: false, medic: false, assault: false, defender: false, captain: false, witch: false})\n\n\n  useEffect(()=>{\n    fetch(\"http://localhost:8002/bots\")\n    .then(result => result.json())\n    .then(data => {\n      setAllBots(data)\n      setFilteredBots(data)\n    })\n  }, [])\n\n\n  function getEnlistedBotOfSameClass(bot){\n    return enlistedBots.find(enlistedBot => enlistedBot.bot_class === bot.bot_class)\n  }\n\n\n  function botAlreadyEnlisted(bot){\n    return Boolean(enlistedBots.find(enlistedBot => enlistedBot.id === bot.id))\n  }\n\n\n  function removeBotFromDatabase(botToDelete){\n    fetch(`http://localhost:8002/bots/${botToDelete.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n    .then(result => result.json())\n    .then(() => {\n      setAllBots(allBots.filter(currentBot => currentBot.id !== botToDelete.id))\n      setEnlistedBots(enlistedBots.filter(enlistedBot => enlistedBot.id !== botToDelete.id))\n    })\n  }\n\n\n  function handleBotAction(bot, action){\n    switch(action){\n      case \"release-bot\":\n        removeBotFromDatabase(bot)   \n        break;\n\n      case \"enlist-bot\":\n        const enlistedBotOfSameClass = getEnlistedBotOfSameClass(bot)\n        if(!enlistedBotOfSameClass){\n          setEnlistedBots([...enlistedBots, bot])\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id))\n        }else{\n          alert(`Uh-Oh!\\nThe ${bot.bot_class} role has already been filled\\n${enlistedBotOfSameClass.name} is currently doing that`)\n        }\n        break;\n\n      case \"delist-bot\":\n        setEnlistedBots(enlistedBots.filter(currentBot => currentBot.id !== bot.id))\n        setFilteredBots([...filteredBots, bot])\n        break;\n        \n      case \"show-all-bots\":\n        setBotSpecs(null)\n        setShowSortBar(true)\n        break;\n        \n      case \"show-bot-specs\":\n        setBotSpecs(bot)\n        setShowSortBar(false)\n    }\n  }\n\n\n  function getBotList(botsArray){\n    return botsArray.map(bot => <BotCard key={bot.id} bot={bot} handleBotAction={handleBotAction}/>)\n  }\n\n\n  function sortBots(data, sortBy){\n    data.sort((a, b) => {\n      if(a[sortBy] > b[sortBy]){\n        return sortStrategy.current[sortBy] * 1\n      }else if(a[sortBy] < b[sortBy]){\n        return sortStrategy.current[sortBy] * -1\n      } else {\n        return 0\n      }\n    })\n\n    return data\n  }\n\n\n  function updateSortStrategy(sortBy){\n    sortStrategy.current[sortBy] *= -1 //if it was ascending, make it descending and vice versa\n  }\n\n  \n  function handleSortAction(sortBy){\n    updateSortStrategy(sortBy)\n    setFilteredBots(sortBots([...filteredBots], sortBy))\n  }\n\n\n  function capitalizeFirstLetter(string){\n    const firstLetterCapitalized = string[0].toUpperCase()\n    const restOfLetters = string.split(\"\").slice(1).join(\"\")\n    \n    return firstLetterCapitalized + restOfLetters\n  }\n\n\n  function handleFilterAction(filterBy){\n    if(filteredBots == allBots){\n      setFilteredBots(allBots.filter(\n        bot => bot.bot_class === capitalizeFirstLetter(filterBy)\n      ).filter(filteredBot => !botAlreadyEnlisted(filteredBot)))\n      currentlyFilteringBy.current[filterBy] = true\n\n    }else if(currentlyFilteringBy.current[filterBy]){\n      const newFilteredBots = filteredBots.filter(bot => bot.bot_class !== capitalizeFirstLetter(filterBy))\n      if(!newFilteredBots.length){\n        setFilteredBots(allBots)\n      }else{\n        setFilteredBots(newFilteredBots)\n      }\n      currentlyFilteringBy.current[filterBy] = false\n\n    }else if(!currentlyFilteringBy.current[filterBy]) {\n      const additionalBots = allBots.filter(\n        bot => bot.bot_class === capitalizeFirstLetter(filterBy)\n      ).filter(filteredBot => !botAlreadyEnlisted(filteredBot))\n\n      setFilteredBots([...filteredBots,...additionalBots])\n      currentlyFilteringBy.current[filterBy] = true\n    }\n\n    return currentlyFilteringBy.current\n  }\n\n  return (\n    <div>\n      <YourBotArmy enlistedBots={getBotList(enlistedBots)}/>\n      {showSortBar ? <SortBar handleSortAction={handleSortAction} handleFilterAction={handleFilterAction}/> : <div></div>}\n      {botSpecs ? <BotSpecs bot={botSpecs} handleBotAction={handleBotAction} botAlreadyEnlisted={botAlreadyEnlisted(botSpecs)}/> : <BotCollection filteredBots={getBotList(filteredBots)}/>}\n    </div>\n  )\n}\n\nexport default BotsPage;","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotCollection.js",[],"/home/moringa/Development/code/phase2/Bot-Battlr/src/components/YourBotArmy.js",[],"/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotCard.js",["41"],"import React from \"react\";\n\nconst botTypeClasses = {\n  Assault: \"icon military\",\n  Defender: \"icon shield\",\n  Support: \"icon plus circle\",\n  Medic: \"icon ambulance\",\n  Witch: \"icon magic\",\n  Captain: \"icon star\",\n};\n\nfunction BotCard({ bot, handleBotAction }) {\n  return (\n    <div className=\"ui column\">\n      <div\n        className=\"ui card\"\n        key={bot.id}\n        onClick={()=>handleBotAction(bot, 'show-bot-specs')}\n      >\n        <div className=\"image\">\n          <img alt=\"oh no!\" src={bot.avatar_url} />\n        </div>\n        <div className=\"content\">\n          <div className=\"header\">\n            {bot.name}\n            <i className={botTypeClasses[bot.bot_class]} />\n          </div>\n          <div className=\"meta text-wrap\">\n            <small>{bot.catchphrase}</small>\n          </div>\n        </div>\n        <div className=\"extra content\">\n          <span>\n            <i className=\"icon heartbeat\" />\n            {bot.health}\n          </span>\n\n          <span>\n            <i className=\"icon lightning\" />\n            {bot.damage}\n          </span>\n          <span>\n            <i className=\"icon shield\" />\n            {bot.armor}\n          </span>\n          <span>\n            <div className=\"ui center aligned segment basic\">\n              <button\n                className=\"ui mini red button\"\n                onClick={(event)=>{\n                  event.stopPropagation()\n                  {handleBotAction(bot, \"release-bot\")}}}\n              >\n                x\n              </button>\n            </div>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BotCard;\n","/home/moringa/Development/code/phase2/Bot-Battlr/src/components/BotSpecs.js",[],"/home/moringa/Development/code/phase2/Bot-Battlr/src/components/SortBar.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":56,"column":5,"nodeType":"48","messageId":"49","endLine":84,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":128,"column":21,"nodeType":"52","messageId":"53","endLine":128,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":52,"column":19,"nodeType":"56","messageId":"57","endLine":52,"endColumn":56},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]